#!/bin/sh
set -eu

PROGRAM=$(basename "$0")
DATA_DIR=${HOME}/.config/${PROGRAM}

msg() { printf '%s: %s\n' "${PROGRAM}" "$*" >&2; }

download_to_stdout() {
	if command -v curl >/dev/null; then
		curl -LkS -s "$@"
	elif command -v wget >/dev/null; then
		wget -O- --no-check-certificate -q "$@"
	else
		msg "Cannot find curl or wget"
		exit 1
	fi
}

prepare_musl_rootfs() {
	ROOTFS_DIR="${DATA_DIR}/rootfs"
	mkdir -p "${ROOTFS_DIR}"
	mkdir -p "${ROOTFS_DIR}/etc"

	## Prepare musl-c rootfs
	ALPINE_ARCH=$(uname -m)

	while IFS=, read -r pkg lib dir ver; do
		if [ ! -e "${lib}" ]; then
			URL="http://dl-cdn.alpinelinux.org/alpine/v3.22/main/${ALPINE_ARCH}/${pkg}-${ver}.apk"
			msg "Downloading ${pkg}"
			download_to_stdout "${URL}" | gzip -d | tar -x -C "${ROOTFS_DIR}" "${dir}" 2>/dev/null
		fi
	done <<-EOF
		musl,${ROOTFS_DIR}/lib/ld-musl-${ALPINE_ARCH}.so.1,lib,1.2.5-r10
		libgcc,${ROOTFS_DIR}/usr/lib/libgcc_s.so.1,usr,14.2.0-r6
		libstdc++,${ROOTFS_DIR}/usr/lib/libstdc++.so.6,usr,14.2.0-r6
		ca-certificates-bundle,${ROOTFS_DIR}/etc/ssl,etc/ssl,20241121-r2
		zlib,${ROOTFS_DIR}/usr/lib/libz.so.1,usr,1.3.1-r2
	EOF

	if [ ! -f "${ROOTFS_DIR}/ect/os-release" ]; then
		cat <<EOF >"${ROOTFS_DIR}/etc/os-release"
NAME="Alpine Linux"
ID=alpine
VERSION_ID=3.22.0
PRETTY_NAME="Alpine Linux v3.22"
HOME_URL="https://alpinelinux.org/"
BUG_REPORT_URL="https://gitlab.alpinelinux.org/alpine/aports/-/issues"
EOF
	fi

	if [ ! -f "${ROOTFS_DIR}/ect/resolv.conf" ]; then
		cat <<EOF >"${ROOTFS_DIR}/etc/resolv.conf"
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF
	fi

	if [ ! -f "${ROOTFS_DIR}/etc/hosts" ]; then
		cat <<EOF >"${ROOTFS_DIR}/etc/hosts"
127.0.0.1 localhost
::1 localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
	fi

	if [ ! -f "${ROOTFS_DIR}/etc/passwd" ]; then
		cat <<EOF >"${ROOTFS_DIR}/etc/passwd"
root:x:0:0:root:/root:/bin/sh
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/mail:/sbin/nologin
news:x:9:13:news:/usr/lib/news:/sbin/nologin
uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin
cron:x:16:16:cron:/var/spool/cron:/sbin/nologin
ftp:x:21:21::/var/lib/ftp:/sbin/nologin
sshd:x:22:22:sshd:/dev/null:/sbin/nologin
games:x:35:35:games:/usr/games:/sbin/nologin
ntp:x:123:123:NTP:/var/empty:/sbin/nologin
guest:x:405:100:guest:/dev/null:/sbin/nologin
nobody:x:65534:65534:nobody:/:/sbin/nologin
user:x:1000:1000:Linux User,,,:/home/user:/bin/bash
EOF
	fi

	mkdir -p "${ROOTFS_DIR}/proc"
	if [ ! -f "${ROOTFS_DIR}/proc/loadavg" ]; then
		cat >"${ROOTFS_DIR}/proc/loadavg" <<-EOF
			0.00 0.00 0.00 0/0 0
		EOF
	fi

	if [ ! -f "${ROOTFS_DIR}/proc/stat" ]; then
		cat >"${ROOTFS_DIR}/proc/stat" <<-EOF
			cpu  0 0 0 0 0 0 0 0 0 0
		EOF
	fi

	if [ ! -f "${ROOTFS_DIR}/proc/uptime" ]; then
		cat >"${ROOTFS_DIR}/proc/uptime" <<-EOF
			0.00 0.00
		EOF
	fi

	mkdir -p "${ROOTFS_DIR}/proc/sys/kernel"
	if [ ! -f "${ROOTFS_DIR}"/proc/sys/kernel/cap_last_cap ]; then
		cat >"${ROOTFS_DIR}/proc/sys/kernel/cap_last_cap" <<-EOF
			40
		EOF
	fi

	mkdir -p "${ROOTFS_DIR}/proc/sys/fs/inotify"
	if [ ! -f "${ROOTFS_DIR}"/proc/sys/fs/inotify/max_queued_events ]; then
		cat >"${ROOTFS_DIR}/proc/sys/fs/inotify/max_queued_events" <<-EOF
			16384
		EOF
	fi

	if [ ! -f "${ROOTFS_DIR}"/proc/sys/fs/inotify/max_user_instances ]; then
		cat >"${ROOTFS_DIR}/proc/sys/fs/inotify/max_user_instances" <<-EOF
			128
		EOF
	fi

	if [ ! -f "${ROOTFS_DIR}"/proc/sys/fs/inotify/max_user_watches ]; then
		cat >"${ROOTFS_DIR}/proc/sys/fs/inotify/max_user_watches" <<-EOF
			65536
		EOF
	fi

	mkdir -p "${ROOTFS_DIR}"/sys/devices
}

set_installation_info() {
	if [ $# -gt 0 ]; then
		if [ -d "$1" ]; then
			installation_root=$(realpath "$1")
		else
			msg "dir $1 not exists!"
			exit 1
		fi
	else
		# installation_path=$(code_cli version show | tail -n+2 | sed 's/.*Installation path: \(.*\)/\1/g')
		# installation_root=$(dirname "$(dirname "$(dirname "${installation_path}")")")
		commit_id=$(code_cli --version | sed 's/.*commit \([a-f0-9]\+\).*/\1/')
		case "${PROGRAM}" in
		*-insiders) installation_root="${HOME}/.vscode-insiders/cli/serve-web/${commit_id}" ;;
		*) installation_root="${HOME}/.vscode/cli/serve-web/${commit_id}" ;;
		esac
	fi
	workbench_dir="${installation_root}/out/vs/code/browser/workbench"
	if [ -d "${workbench_dir}" ]; then
		revert_patch="${workbench_dir}/revert.patch"
		msg "workbench_dir: ${workbench_dir}"
	else
		msg "Cannot find installation in ${installation_root}"
		exit 1
	fi
}

# Rename to integrate in other programs, ie. proot_musl_exec
proot_musl_run() {
	prepare_musl_rootfs
	unset LD_PRELOAD
	export PROOT_TMP_DIR="${TMPDIR-/tmp}"
	proot \
		--change-id=1000:1000 \
		--kill-on-exit \
		--bind="${ROOTFS_DIR}/etc/resolv.conf:/etc/resolv.conf" \
		--bind="${ROOTFS_DIR}/etc/hosts:/etc/hosts" \
		--bind="${ROOTFS_DIR}/etc/passwd:/etc/passwd" \
		--bind="${ROOTFS_DIR}/etc/ssl:/etc/ssl" \
		--bind="${ROOTFS_DIR}/proc/loadavg:/proc/loadavg" \
		--bind="${ROOTFS_DIR}/proc/stat:/proc/stat" \
		--bind="${ROOTFS_DIR}/proc/uptime:/proc/uptime" \
		--bind="${ROOTFS_DIR}/proc/sys/kernel/cap_last_cap:/proc/sys/kernel/cap_last_cap" \
		--bind="${ROOTFS_DIR}/proc/sys/fs/inotify/max_queued_events:/proc/sys/fs/inotify/max_queued_events" \
		--bind="${ROOTFS_DIR}/proc/sys/fs/inotify/max_user_instances:/proc/sys/fs/inotify/max_user_instances" \
		--bind="${ROOTFS_DIR}/proc/sys/fs/inotify/max_user_watches:/proc/sys/fs/inotify/max_user_watches" \
		--bind="${ROOTFS_DIR}/sys/devices:/sys/devices" \
		--bind="${ROOTFS_DIR}/lib:/lib" \
		--bind="${ROOTFS_DIR}/usr:/usr" \
		--bind=/system/bin/env:/usr/bin/env \
		--bind=/system/bin/sh:/bin/sh \
		"$@"
}

proot_musl_run "$@"
